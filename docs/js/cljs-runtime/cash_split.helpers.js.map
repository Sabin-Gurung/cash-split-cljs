{"version":3,"sources":["cash_split/helpers.cljs"],"mappings":";AAIA,+BAAA,/BAAOA,sEAAWC;AAAlB,AACE,IAAA,AACE,GAAI,6CAAA,7CAACE,gDAAKF;AAAV;;AAEE,IAAMG,mBAAW,qBAAA,rBAACC,mCAA0BJ;AAA5C,AACE,oBAAMG;AAAN,AAAiB,OAACE,SAAYL;;AAA9B;;;gBAJN,GAAA,CAAAC,kBAKSK;AALT,QAAAL,JAKkBM;AALlB,AAAA;;AAAA,AAAA,MAAAN;;;;AAOF,2BAAA,3BAAMO,8DAAOC;AAAb,AACE,OAAA,AAAIA;;AAEN,+BAAA,/BAAMC,sEAAWD;AAAjB,AACE,OAACV,6BAAU,AAACS,yBAAMC","names":["cash-split.helpers/parse-num","str","e17395","cljs.core._EQ_","is-number?","cljs.core/re-matches","js/parseInt","js/Error","_","cash-split.helpers/value","event","cash-split.helpers/int-value"],"sourcesContent":["(ns cash-split.helpers\n  (:require\n   [cljs.reader :as reader]))\n\n(defn- parse-num [str]\n  (try\n    (if (= \"\" str)\n      0\n      (let [is-number? (re-matches #\"\\d+(\\.\\d+)?\" str)] \n        (when is-number? (js/parseInt str))))\n    (catch js/Error _ nil)))\n\n(defn value [event]\n  (-> event .-target .-value))\n\n(defn int-value [event]\n  (parse-num (value event)))\n\n"]}