{"version":3,"sources":["cash_split/calculator.cljs"],"mappings":"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","names":["cash-split.calculator/round","n","cljs.core/parse-double","cash-split.calculator/sub","a","b","cash-split.calculator/average-cost","dt","cljs.core/empty?","cljs.core.apply","cljs.core/+","cljs.core.map","cljs.core/count","cash-split.calculator/update-budget","avg","calculate-budget","p__16327","map__16328","cljs.core/--destructure-map","cljs.core.get","amount","av","cljs.core.assoc","p1__16326#","p__16329","p__16330","vec__16331","seq__16332","cljs.core/seq","first__16333","cljs.core/first","cljs.core/next","vec__16334","seq__16335","first__16336","cash-split.calculator/iter-one","g","gs","r","rs","result","to-give","cljs.core/abs","to-recieve","res","new-g","new-r","cljs.core/cons","cljs.core.update_in","cljs.core/conj","cash-split.calculator/calculate-payment-graph","givers","recievers","cljs.core/iterate","cljs.core.partial","cljs.core/apply","cljs.core.take_while","cljs.core/some?","cljs.core/last","cljs.core/vals","cljs.core.sort","cash-split.calculator/calculate-budget","data","total","data-with-budget","p1__16337#","cljs.core.filter","p1__16338#","data-map","cljs.core.into","cljs.core.juxt","cljs.core/identity","payment-graph"],"sourcesContent":["(ns cash-split.calculator)\n\n(defn- round [n] (parse-double (.toFixed n 2)))\n(defn- sub [a b] (round (- a b)))\n(defn average-cost [dt]\n  (if (empty? dt)\n    0\n    (round (/ (apply + (map :amount dt))\n              (count dt)))))\n\n(defn- update-budget [avg dt]\n  (let [calculate-budget (fn [{amount :amount :as dt} av] (assoc dt :budget (sub amount av)))]\n    (map #(calculate-budget % avg) dt)))\n\n(defn- iter-one [[g & gs] [r & rs] result]\n  (let [to-give (abs (:budget g))\n        to-recieve (:budget r)\n        res (sub to-recieve to-give)\n        new-g (assoc g :budget res)\n        new-r (assoc r :budget res)]\n    (cond\n      (or (nil? g) (nil? r)) nil\n      (neg? res) [(cons new-g gs) rs (update-in result [(:name g) :to-give] conj {:name (:name r) :amount to-recieve})]\n      (pos? res) [gs (cons new-r rs) (update-in result [(:name g) :to-give] conj {:name (:name r) :amount to-give})]\n      (zero? res) [gs rs (update-in result [(:name g) :to-give] conj {:name (:name r) :amount to-give})])))\n\n(defn- calculate-payment-graph [givers recievers result]\n  (->> (iterate (partial apply iter-one) [givers recievers result])\n       (take-while some?)\n       last\n       last\n       vals\n       (sort :budget)))\n\n(defn calculate-budget [data]\n  (let [avg (average-cost data)\n        total (apply + (map :amount data))\n        data-with-budget (update-budget avg data)\n        givers (filter #(neg? (:budget %)) data-with-budget)\n        recievers (filter #(not (neg? (:budget %))) data-with-budget)\n        data-map (into {} (map (juxt :name identity) data-with-budget))\n        payment-graph (calculate-payment-graph givers recievers data-map)]\n    {:avg avg\n     :total total\n     :payment-graph payment-graph}))\n"]}